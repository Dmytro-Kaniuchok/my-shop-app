"use client";

import { useState } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import styles from "./order.module.css";
import toast from "react-hot-toast";
import { products } from "../../data/products";
import { SiTelegram, SiViber } from "react-icons/si";

interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
}

const OrderPage = () => {
  const router = useRouter();
  const searchParams = useSearchParams();

  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    phone: "",
    email: "",
    address: "",
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  // --- –§–æ—Ä–º—É–≤–∞–Ω–Ω—è cartItems ---
  const productId = searchParams.get("id");
  const quantityParam = Number(searchParams.get("quantity") || 1);

  // –ü—Ä–æ–¥—É–∫—Ç —ñ–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
  const singleProduct = productId
    ? products.find((p) => p.id === productId)
    : null;

  const cartItemsFromQuery: CartItem[] = singleProduct
    ? [
        {
          id: singleProduct.id,
          name: singleProduct.name,
          price: singleProduct.price,
          quantity: quantityParam,
        },
      ]
    : [];

  // –ö–æ—à–∏–∫ —ñ–∑ localStorage
  const storedCart =
    typeof window !== "undefined" ? localStorage.getItem("cart") : null;
  const cartItems: CartItem[] = storedCart
    ? JSON.parse(storedCart)
    : cartItemsFromQuery;

  // --- –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ—Å–∏–ª–∞–Ω—å –¥–ª—è Viber/Telegram ---
  const generateMessageLink = (
    cart: CartItem[],
    messenger: "viber" | "telegram"
  ) => {
    const total = cart.reduce(
      (sum, item) => sum + item.price * item.quantity,
      0
    );

    const message = cart
      .map(
        (item) =>
          `${item.name} (${item.id}) ‚Äî ${item.quantity} —à—Ç √ó ${item.price} –≥—Ä–Ω`
      )
      .join("\n");

    const fullMessage = `üõí –ù–æ–≤–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n\nüë§ –Ü–º‚Äô—è: ${formData.name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}\nüè† –ê–¥—Ä–µ—Å–∞: ${formData.address}\nüìß Email: ${formData.email || "-"}\n\n–¢–æ–≤–∞—Ä–∏:\n${message}\n\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${total} –≥—Ä–Ω`;

    if (messenger === "viber") {
      return `viber://chat?number=+380XXXXXXXXX&text=${encodeURIComponent(
        fullMessage
      )}`;
    }

    if (messenger === "telegram") {
      return `https://t.me/knc_d?text=${encodeURIComponent(fullMessage)}`;
    }

    return "#";
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (cartItems.length === 0) {
      toast.error("–ö–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π! –î–æ–¥–∞–π—Ç–µ —Ç–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è–º.");
      return;
    }

    const dataToSend = {
      "–Ü–º‚Äô—è": formData.name,
      "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É": formData.phone,
      Email: formData.email,
      "–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏": formData.address,
      –¢–æ–≤–∞—Ä–∏: cartItems
        .map((item) => `${item.name} ${item.quantity} —à—Ç. ‚Äî ${item.price} –≥—Ä–Ω`)
        .join("\n"),
      "–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞": cartItems.reduce(
        (sum, item) => sum + item.price * item.quantity,
        0
      ),
    };

    try {
      setLoading(true);

      const res = await fetch(process.env.NEXT_PUBLIC_FORMSPREE_ENDPOINT!, {
        method: "POST",
        headers: { Accept: "application/json" },
        body: JSON.stringify(dataToSend),
      });

      setLoading(false);

      if (res.ok) {
        toast.success("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!");

        if (!productId) {
          localStorage.removeItem("cart");
          window.dispatchEvent(new Event("cartUpdated"));
        }
        router.push("/order/success");
      } else {
        toast.error("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ");
      }
    } catch {
      setLoading(false);
      toast.error("–ü–æ–º–∏–ª–∫–∞ –∑ º—î–¥–Ω–∞–Ω–Ω—è");
    }
  };

  return (
    <main className={styles.container}>
      <h1 className={styles.title}>–û—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</h1>

      <form onSubmit={handleSubmit} className={styles.form}>
        <label className={styles.label}>
          –Ü–º&apos;—è:
          <input
            className={styles.input}
            type="text"
            name="name"
            placeholder="–Ü–≤–∞–Ω"
            pattern="[A-Za-z–ê-–Ø–∞-—è–Å—ë–á—ó–Ü—ñ–Ñ—î“ê“ë\s]+"
            title="–í–≤–æ–¥—å—Ç–µ —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏"
            value={formData.name}
            onChange={handleChange}
            required
          />
        </label>

        <label className={styles.label}>
          –¢–µ–ª–µ—Ñ–æ–Ω:
          <input
            className={styles.input}
            type="tel"
            name="phone"
            placeholder="+380..."
            pattern="[0-9+]*"
            maxLength={13}
            title="–í–≤–æ–¥—å—Ç–µ –ª–∏—à–µ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –∑–Ω–∞–∫ +"
            value={formData.phone}
            onChange={handleChange}
            required
          />
        </label>

        <label className={styles.label}>
          Email:
          <input
            className={styles.input}
            type="email"
            name="email"
            placeholder="you@example.com"
            value={formData.email}
            onChange={handleChange}
          />
        </label>

        <label className={styles.label}>
          –ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:
          <input
            className={styles.input}
            type="text"
            name="address"
            value={formData.address}
            onChange={handleChange}
            required
          />
        </label>

        <label className={styles.checkboxLabel}>
          <input type="checkbox" name="consent" required />–Ø –∑–≥–æ–¥–µ–Ω(–Ω–∞) –Ω–∞
          –æ–±—Ä–æ–±–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        </label>

        <button type="submit" className={styles.submitBtn}>
          {loading ? "–í—ñ–¥–ø—Ä–∞–≤–∫–∞..." : "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"}
        </button>
      </form>

      {cartItems.length > 0 && (
        <p className={styles.quickLink}>
          –ê–±–æ —à–≤–∏–¥–∫–æ:
          <a
            href={generateMessageLink(cartItems, "telegram")}
            target="_blank"
            rel="noopener noreferrer"
          >
            <SiTelegram size={16} color="#0088cc" /> Telegram
          </a>
          <a
            href={generateMessageLink(cartItems, "viber")}
            target="_blank"
            rel="noopener noreferrer"
          >
            <SiViber size={16} color="#665cac" /> Viber
          </a>
        </p>
      )}
    </main>
  );
};

export default OrderPage;
